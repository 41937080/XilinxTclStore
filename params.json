{"name":"Xilinxtclstore","tagline":"Xilinx Tcl Store","body":"# XilinxTclStore\r\n\r\n\r\n## As a Contributor\r\n1. Get git account \\<USER\\> and download git on your machine\r\n2. Ask for permission to XilinxTclStore repository by sending e-mail to tclstore@xilinx.com\r\n3. Sign on to github.com\r\n4. Switch to Xilinx at upper left side by your account name \\<USER\\>\r\n5. Switch to GitShell on your machine\r\n\r\n### Checkout the Repository\r\n\r\nIf you have already cloned the repository then skip this step. Otherwise to pull this repository from within a firewall you will need to congifure http.proxy.  Note this setting may be different for your system.  If you have questions contact your IT network administrator:\r\n```bash\r\ngit config --global http.proxy http://proxy:80\r\n```\r\n\r\n### Setting up User Name and Email\r\n\r\n```bash\r\n#Create and cd to a working directory, for instance ~/github/\r\nmkdir <WORKING_DIR>\r\ncd <WORKING_DIR>\r\ngit config --golbal USER.name <USER>  #github USER name\r\ngit config --global USER.email your_email@your_company.com\r\n```\r\n\r\n6. Clone the repository\r\n\r\nWe recommend working off of only the master branches for simplicity.  We do support forking of repositories, which require syncing and merging.  If you are familiar with this methodology you can use it, otherwise stick with working off the master branches of each repo.  You need to clone the Xilinx master repo to your local area.  Don't foget to substitute \\<USER\\> for your real github account name:\r\n\r\nOn Windows\r\n\r\n```bash\r\ncd <WORKING_DIR>\r\ngit clone https://github.com/Xilinx/XilinxTclStore.git\r\n```\r\n\r\nOn Linux\r\n\r\n```bash\r\ncd <WORKING_DIR>\r\ngit clone http://<USER>@github.com/Xilinx/XilinxTclStore.git\r\n```\r\n\r\nYou will need to enter your github password when prompted.\r\n\r\nNow you have cloned the repo directories under \"\\<WORKING_DIR\\>/XilinxTclStore\"\r\n\r\ncd \\<WORKING_DIR\\>/XilinxTclStore\r\n\r\n```bash\r\ngit status\r\n```\r\n\r\n7. Check out the entire master branch (you can also check out individual files by passing the specific file name).  Below is the command for checking out the entire default branch.\r\n```bash\r\ngit checkout \r\n```\r\n\r\n8. Add your application code to the respective directory.  For a new app, create the directories following the taxonomy tclapp/\\<YOUR_COMPANY\\>/\\<YOUR_APP\\> (for an example see tclapp/mycompany/myapp), including test code.  Note you can use your github account name in place of \\<YOUR_COMPANY\\> if you would like.<p>\r\n    For more information on creating application, refer to the following section<p>\r\n    ####My First Vivado Tcl App.\r\n\r\n9. Mark files for adding. Make sure you add all necessary files, including the tclIndex, pkgIndex.tcl, and package provider files  (3 in addition to the \"normal\" tcl source files.  The tclIndex and pkgIndex.tcl files are generated by Vivado - described later in the section for My First Vivado Tcl App. \r\n```bash\r\ncd ./XilinxTclStore\r\ngit add tclapp/<YOUR_COMPANY>/<YOUR_APP>\r\n```\r\n\r\n10. Commit to local repository\r\n```bash\r\ngit commit -m \"your description of the changes\"\r\n```\r\n\r\n11. Push to your cloned master \\<USER\\>/XilinxTclStore in Github\r\n```bash\r\ngit push origin\r\n```\r\n\r\n12. Send Pull Request.  Switch back to github.com in a web browser, and navigate to your repo\r\nhttps://help.github.com/articles/creating-a-pull-request\r\nPress \"Pull Request\" button right upper-ish <p>\r\nAdd any additiona note if you wish<p>\r\n\r\nDone!\r\n\r\n\r\n## As a Gate Keeper (app owner)\r\nconfig proxy (see section As a Contributor)\r\n\r\nconfig \\<USER\\> (see section As a Contributor)\r\n\r\nconfig \\<USER\\> email (see section As a Contributor)\r\n\r\nconfig merge option\r\n```bash\r\ngit config --global merge.defaultToUpstream true\r\n```\r\n\r\n1. Create a repository by cloning XilinxTclStore, skip to next step if repository already exists locally\r\n```bash\r\nOn Windows\r\ngit clone https://github.com/XilinxInc/XilinxTclStore.git\r\nOn Linux\r\ngit clone http://USER@github.com/XilinxInc/XilinxTclStore.git\r\n```\r\n\r\n2. Update local repo with github master\r\n```bash\r\ngit fetch\r\n```\r\n\r\n3. Merge any changes\r\n```bash\r\ngit merge --ff\r\n```\r\n\r\n4. Set up remote to point where the pull request is sent usually USER/USER if this has not been done yet\r\n\r\n```bash\r\ngit remote add remote_name https://github.com/<USER>/XilinxTclStore.git\r\ne.g.\r\ngit remote add raj https://github.com/rajklair/XilinxTclStore.git\r\n```\r\n\r\n5. Update local repo with \\<USER\\> branch\r\n```bash\r\ngit fetch remote_name\r\n```\r\n\r\n6. Merge changes from \\<USER\\> branch.  Use \"master\" or the name of the branch if the user forked.\r\n```bash\r\ngit merge remote_name/remote_branch\r\ne.g.\r\ngit merge raj/rajklair\r\n```\r\n\r\n7. Fix any merge conlicts\r\n\r\n8. Add the changes and commit\r\n```bash\r\ngit add .\r\ngit commit -m \"update notes\"\r\n```\r\n\r\n9. Run tests and check content\r\n\r\n10. Push to github or go to step 11\r\n```bash\r\ngit push origin master\r\n```\r\ngeto Step 12\r\n\r\n11. Go to Github.com\r\nPull Request from the \\<USER\\>.<p>\r\nIf everything is good, merge, add comments and close the pull request.<p>\r\nIf something is not good, add comments so the requester can make changes.<p>\r\nIf something is bad, add comments, reject it and close the pull request.<p>\r\nhttps://help.github.com/articles/merging-a-pull-request\r\n\r\n12. Delete the local repository\r\n```bash\r\ngit branch -r -d remote_name/remote_branch\r\ne.g.\r\ngit branch -r -d raj/rajklair\r\n```\r\n Or in browser, delete this branch after merging when prompted.\r\n\r\nDone\r\n\r\n## My First Vivado Tcl App\r\n\r\n### Let Vivado know where your cloned Tcl repository is located\r\n\r\nBefore you start Vivado, there is an environment variable to change the location of the default repository.  YOu need to change this to your local working directory to test the app and generate some needed files.  Set XILINX_TCLAPP_REPO to the location of your cloned repository\r\n```bash\r\nexport XILINX_TCLAPP_REPO=<WORKING_DIR>/XilinxTclStore\r\n```\r\nSome of the Tcl app related commmands in Vivado require a Tcl repo to be present so it is important the\r\nenv variable is set before you start Vivado.\r\n\r\n### Fetch and merge updates to your cloned repository\r\n\r\nIf you have already cloned the repository, then you may want to fetch and merge the latest updates into your clone.<p>\r\nThe lastest and greatest official apps are available in the \"master\" branch so this is where you want to merge into.<p>\r\n\r\n```bash\r\ncd XilinxTclStore\r\ngit checkout master\r\ngit fetch\r\ngit merge\r\n```\r\n\r\n### Create the Directory Structure\r\n\r\nThe directory structure should follow \\<WORKING_DIR\\>/tclapp/\\<YOUR_COMPANY\\>/\\<YOUR_APP\\>/...\r\n```bash\r\nmkdir -p ./tclapp/mycompany/myapp\r\ncd ./tclapp/mycompany/myapp\r\n```\r\n\r\nMore directory and testing structure can be found in tclapp/README.\r\n\r\n### Create the Package Provider\r\n\r\nEvery app needs a tcl script that provides packaging information to Vivado.  This is called the package provider.  The name of the script can be whatever you like, but the contents of the file must be the same as published below.  We suggest a .tcl file with the same name as your app, \\<YOUR_APP\\>. See one of the existing apps for an example.\r\n```bash\r\nvi ./myapp.tcl\r\n```\r\n\r\nChange the version and namespace to match your app:\r\n```tcl\r\n# tclapp/mycompany/myapp/myapp.tcl\r\npackage require Tcl 8.5\r\n\r\nnamespace eval ::tclapp::mycompany::myapp {\r\n\r\n    # Allow Tcl to find tclIndex\r\n    variable home [file join [pwd] [file dirname [info script]]]\r\n    if {[lsearch -exact $::auto_path $home] == -1} {\r\n    lappend ::auto_path $home\r\n    }\r\n\r\n}\r\npackage provide ::tclapp::mycompany::myapp 1.0\r\n```\r\n\r\n\r\n### Customize the App\r\n\r\nYour app scripts will not be able to have this same name, but could be placed inside of this package provider file.\r\nIf you already have the app created, then copy it into \\<WORKING_DIR\\>/tclapp/\\<YOUR_COMPANY\\>/\\<YOUR_APP\\>/.\r\nIf you are creating the app from scratch, then:\r\n```bash\r\nvi ./myfile.tcl\r\n```\r\n\r\nYou need to make sure of couple things:\r\n\r\n1. You must have all procs in namespaces, e.g.\r\n```tcl\r\n# tclapp/mycompany/myapp/myfile.tcl\r\nproc ::tclapp::mycompany::myapp::myproc1 {arg1 {optional1 ,}} {\r\n    ...\r\n}\r\n```\r\n\r\n2. Add the commands that you would like to export to the top of each file.  It is important\r\nthat your are explicit about the commands, in other words, do *not* use wildcards.\r\n```tcl\r\n# tclapp/mycompany/myapp/myfile.tcl\r\nnamespace eval ::tclapp::mycompany::myapp {\r\n    # Export procs that should be allowed to import into other namespaces\r\n    namespace export myproc1\r\n}\r\nproc ::tclapp::mycompany::myapp::myproc1 {arg1 {optional1 ,}} {\r\n    ...\r\n}\r\n```\r\n\r\n3. You **must** have 4 \"meta-comments\" which describe your procedure interfaces - inside of the procedures,\r\nand each meta-comment **must** be seperated by new lines (without comments)\r\n```tcl\r\n# tclapp/mycompany/myapp/myfile.tcl\r\nnamespace eval ::tclapp::mycompany::myapp {\r\n    # Export procs that should be allowed to import into other namespaces\r\n    namespace export myproc1\r\n}\r\nproc ::tclapp::xilinx::test::myproc1 {arg1 {optional1 ,}} {\r\n\r\n    # Summary: A one line summary of what this proc does\r\n\r\n    # Argument Usage:\r\n    # -arg1 <arg> : A one line summary of this argument which takes a value indicated by <arg>.\r\n    # [-optional1 <arg> = <opt1_default>] : A one line summary of an optional argument that takes a value and which has a default\r\n    # [-optional2] : A one line summary of an optional arg that does not take a value (aka a flag)\r\n\r\n    # Return Value:\r\n    # TCL_OK is returned with result set to a string\r\n\r\n    # Categories: xilinxtclstore, projutils\r\n\r\n\r\n    ...\r\n}\r\n```\r\nEach of these meta-comments is interpreted by Vivado at run-time. It is critical that they be present and correct in your app\r\nor it may not function correctly. The following is a description of each meta-comment.\r\n\r\n#### Summary\r\n\r\nThe text following \"Summary:\" should be a brief, one-line description of your app.\r\n\r\n#### Argument Usage\r\n\r\nThis is the most complex of the meta-comments. As shown in the above example, there should be one line for each mandatory or\r\noptional arg supported by your app. Optional args should be enclosed within []. Args which should be accompanied by a\r\nvalue **must** be followed by the literal text <, \"arg\", and >, indicating to the USER where the value should be placed. The\r\nsummary should explain what are the valid values that a USER might use.\r\nYou can also specify a default value, which is a value which will be assumed if the USER does not specify the given optional\r\narg. You can also have optional args that do not take any value (these are often referred to as \"flags\"). For a flag,\r\nit's presence on the command line implies a value of true, indicating that some optional action should be take by\r\nthe app. An exception to this rule is if the name of the flag is prefixed with \"no_\" (for example, -no_cleanup), in which case\r\na value of false is implied, indicating that the app will not take some action which by default it normally performs.\r\n\r\nYou can also specify positional args. A positional arg is for which just a value is specified\r\nand that has no corresponding flag (e.g. -arg1).\r\n\r\nHere is a more concrete example:\r\n\r\n```tcl\r\n        # Argument Usage:\r\n        # file: Name of  file to generate\r\n        # -owner <arg>: USERname of the owner of the file to be generated.\r\n        # [-date <arg> = <todays_date>]: The date to use in yyyy/mm/dd format, will default to today's date if not specified.\r\n```\r\n\r\nThis example app has one mandatory positional arg, which is the name of a file it will generate. It also has a mandatory\r\nflag -owner, and an optional arg -date, which has a default value. Assuming this app was called \"touch\", an example usage might be:\r\n\r\ntouch /home/joe_USER/myfile -owner root\r\n\r\nUse of this command would result in the creation of a file named /home/joe_USER/myfile, owned by root, and with\r\na file creation date of today.\r\n\r\n\r\n#### Return Value\r\n\r\nUse this meta-comment to specify the possible return values for your app.\r\n\r\n#### Categories\r\n\r\nUse this meta-comment to specify which categories in the Vivado help system your app should be listed. \"Categories:\"\r\nshould be followed by a comma-separated list. By convention, the first category listed should always be \"xilinxtclstore\".\r\nAny additional categories are up to you as the app developer.\r\n\r\n\r\n### Create the Package Index and Tcl Index\r\n\r\n```bash\r\ncd ~/XilinxTclStore/tclapp/mycompany/myapp\r\nvivado -mode tcl -nolog -nojournal\r\n```\r\n\r\n```tcl\r\npkg_mkIndex .\r\nauto_mkindex .\r\n```\r\n\r\n\r\n### Running the Linter\r\n\r\nIf you are not already in Vivado:\r\n```bash\r\nvivado -mode tcl\r\n```\r\n\r\nThere should be a lint_files command available at this point:\r\n```tcl\r\nVivado% lint_files [glob XilinxTclStore/tclapp/mycompany/myapp/*.tcl]\r\n```\r\n\r\nCorrect anything the linter identifies as a problem.\r\n\r\n\r\n### Check the App before you Deploy\r\n\r\n1. Set XILINX_TCLAPP_REPO to point where the local XilinxTclStore is\r\n```bash\r\nexport XILINX_TCLAPP_REPO=<WORKING_DIR>/XilinxTclStore\r\n```\r\nor just the path\r\n```bash\r\nexport XILINX_TCLAPP_REPO=<WORKING_DIR>\r\n```\r\nRun Vivado\r\n```bash\r\nvivado -mode tcl\r\n```\r\n\r\nWhen the env variable is set, Vivado automatically adds the location of the repository to the\r\nauto_load path in Tcl.\r\n\r\n2. Start testing<p>\r\n\r\nRequire the package that was provided by the app\r\n\r\n```tcl\r\nvivado% package require ::tclapp::mycompany::myapp\r\n```\r\n\r\nOptionally import an exported proc\r\n\r\n```tcl\r\nnamespace import ::tclapp::mycompany::myapp::*\r\nmyproc1\r\n...\r\n```\r\n\r\n### Setting up a per repository User Name and Email\r\n\r\n```bash\r\ncd ~/XilinxTclStore\r\ngit config USER.name “johnd”\r\ngit config USER.email “johnd@mycompany.com”\r\n```\r\n\r\n\r\n### Commit Changes\r\n\r\nMake sure you commit your \\<USER\\> branch.\r\n\r\n```bash\r\ncd ~/XilinxTclStore\r\ngit checkout myorg-johnd\r\ngit add .\r\ngit status\r\ngit commit -m \"created myapp for mycompany\"\r\ngit push origin mycompany\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}