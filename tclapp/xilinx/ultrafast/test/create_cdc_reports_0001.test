puts "  #########################################"
puts "  ## START [info script]"
puts "  #########################################"
if {![info exists ::QUIET]} { set ::QUIET 0 }

# Set the File Directory to the current directory location of the script
set file_dir [file normalize [file dirname [info script]]]

# Set the Xilinx Tcl App Store Repository to the current repository location
puts "  == Unit Test directory: $file_dir"

# Set the Name to the name of the script
set name [file rootname [file tail [info script]]]

create_project $name -in_memory

if {$QUIET} {
  set_msg_config -suppress -severity ERROR
  set_msg_config -suppress -severity {CRITICAL WARNING}
  set_msg_config -suppress -severity WARNING
  set_msg_config -suppress -severity INFO
  set_msg_config -suppress -severity STATUS
}

# add_files -fileset sources_1 "$file_dir/src/bench16/bench16.v"
# add_files -fileset sources_1 "$file_dir/src/bench16/mux2.v"
# add_files -fileset sources_1 "$file_dir/src/bench16/mmcm0_clk_wiz.v"
# add_files -fileset constrs_1 "$file_dir/src/bench16/bench16.xdc"
# synth_design -top bench16 -part xc7k70tfbg484-3 -flatten rebuilt

add_files -quiet -fileset sources_1 "$file_dir/src/bench16/bench16_netlist.v"
add_files -quiet -fileset constrs_1 "$file_dir/src/bench16/bench16.xdc"
link_design -quiet -part xc7k70tfbg484-3 -top bench16

#######################################
##
## UNIT TESTS
##
#######################################

# set ::tcltestNumFailed 0
set nFailed $::tcltest::numTests(Failed)

tcltest::test create_cdc_reports--arguments-expected {Check supported command line arguments} -constraints {
} -setup {
} -body {
  set result [::tclapp::xilinx::ultrafast::create_cdc_reports -help]
  return 0
} -cleanup {
} -match glob \
-output {*} \
-result 0 \
-returnCodes {return}

tcltest::test create_cdc_reports--arguments-unexpected {Check unsupported command line arguments} -constraints {
} -setup {
} -body {
  set result [::tclapp::xilinx::ultrafast::create_cdc_reports -unknownCommandLine]
  return 0
} -cleanup {
} -match glob \
-output {*} \
-result {*some error(s) happened. Cannot continue*} \
-returnCodes {error}

tcltest::test create_cdc_reports--command-ok {Check command does not fail} -constraints {
} -setup {
} -body {
  set result [::tclapp::xilinx::ultrafast::create_cdc_reports -return_string]
  puts $result
  return 0
} -cleanup {
  foreach file [glob -nocomplain cdc_summary_*.csv] { file delete -force $file }
  foreach file [glob -nocomplain cdc_report_*.csv] { file delete -force $file }
} -match glob \
-output {*} \
-result 0 \
-returnCodes {return}

tcltest::test create_cdc_reports--results-ok {Check command output against expected results} -constraints {
} -setup {
} -body {
  set result [::tclapp::xilinx::ultrafast::create_cdc_reports -return_string]
  puts $result
  return 0
} -cleanup {
  foreach file [glob -nocomplain cdc_summary_*.csv] { file delete -force $file }
  foreach file [glob -nocomplain cdc_report_*.csv] { file delete -force $file }
} -match glob \
-output {* +----------------------------------------------------------------------------------+
 | Clock Interaction Summary                                                        |
 +----------------+----------------+----------------------+-------------------------+
 | From clock     | To Clock       | Common Primary Clock | Inter-Clock Constraints |
 +----------------+----------------+----------------------+-------------------------+
 | CLK_100i_mmcm0 | CLK_100i_mmcm0 | Yes                  | Timed                   |
 | CLK_100i_mmcm0 | CLK_200i_mmcm0 | Yes                  | Timed                   |
 | CLK_166i_mmcm0 | CLK_100i_mmcm0 | Yes                  | Timed                   |
 | CLK_166i_mmcm0 | CLK_166i_mmcm0 | Yes                  | Timed                   |
 | CLK_166i_mmcm0 | CLK_200i_mmcm0 | Yes                  | Timed                   |
 | CLK_200i_mmcm0 | CLK_100i_mmcm0 | Yes                  | Timed                   |
 | CLK_200i_mmcm0 | CLK_166i_mmcm0 | Yes                  | Timed                   |
 | CLK_200i_mmcm0 | CLK_200i_mmcm0 | Yes                  | Timed                   |
 +----------------+----------------+----------------------+-------------------------+
 +------------------------------------------------------+
 | CDC Summary                                          |
 +----------------+----------------+--------------------+
 | Source Clock   | Dest Clock     | Reported Endpoints |
 +----------------+----------------+--------------------+
 | CLK_100i_mmcm0 | CLK_200i_mmcm0 | 1                  |
 | CLK_166i_mmcm0 | CLK_100i_mmcm0 | 3                  |
 | CLK_166i_mmcm0 | CLK_200i_mmcm0 | 3                  |
 | CLK_200i_mmcm0 | CLK_100i_mmcm0 | 3                  |
 | CLK_200i_mmcm0 | CLK_166i_mmcm0 | 1                  |
 +----------------+----------------+--------------------+
*} \
-result 0 \
-returnCodes {return}

tcltest::cleanupTests

set nFailed [expr $::tcltest::numTests(Failed) - $nFailed]

if {$QUIET} {
  reset_msg_config -suppress -severity ERROR
  reset_msg_config -suppress -severity {CRITICAL WARNING}
  reset_msg_config -suppress -severity WARNING
  reset_msg_config -suppress -severity INFO
  reset_msg_config -suppress -severity STATUS
}

close_project

#######################################
##
## UNIT TESTS STATUS
##
#######################################

if {$nFailed != 0} {
#   error [format " -E- Unit test $name failed: %s" $errorstring]
  puts [format " -E- ${name}.test : $nFailed unit test(s) failed"]
}

puts "  #########################################"
puts "  ## END [info script]"
puts "  #########################################"

if {$nFailed != 0} {
#   error [format " -E- Unit test $name failed: %s" $errorstring]
  return 1
}

return 0
